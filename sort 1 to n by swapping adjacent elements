Sort 1 to N by swapping adjacent elements
Given an array, A of size N consisting of elements 1 to N. A boolean array B consisting of N-1 elements indicates that if B[i] is 1, then A[i] can be swapped with A[i+1].
Find out if A can be sorted by swapping elements.

Examples:

Input : A[] = {1, 2, 5, 3, 4, 6}
        B[] = {0, 1, 1, 1, 0}
Output : A can be sorted
We can swap A[2] with A[3] and then A[3] with A[4].

Input : A[] = {2, 3, 1, 4, 5, 6}
        B[] = {0, 1, 1, 1, 1}
Output : A can not be sorted
We can not sort A by swapping elements as 1 can never be swapped with A[0]=2.

#my way 

A = [1, 2, 5, 3, 4, 6]
B = [0, 1, 1, 1, 0]
n = len(A)
for i in range(len(B) - 1):
    if B[-1] == 1:
        break
    if B[i] and A[i] > A[i + 1]:
        A[i], A[i + 1] = A[i + 1], A[i]

print(A)
