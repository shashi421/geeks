def trace_path(my_dict):  # A Map object
    my_keys = my_dict.keys()
    my_values = my_dict.values()
    result = []
    value = ''
    for key in my_keys:
        while len(result) <= len(my_dict):
            if key not in my_values:
                result.append([key,my_dict[key]])
                value = my_dict[key]
            if value:
                result.append([value,my_dict[value]])
                value = my_dict[value]
                break
            else:
                break
    return result


trace_path({
  "NewYork": "Chicago",
  "Boston": "Texas",
  "Missouri": "NewYork",
  "Texas": "Missouri"
})
]]]def trace_path(my_dict):
    result = []
    # Create a reverse dict of the given dict i.e if the given dict has (N,C)
    # then reverse dict will have (C,N) as key-value pair
    # Traverse original dict and see if it's key exists in reverse dict
    # If it doesn't exist then we found our starting point.
    # After the starting point is found, simply trace the complete path
    # from the original dict.
    reverse_dict = dict()
    # To fill reverse dict, iterate through the given dict
    keys = my_dict.keys()
    for key in keys:
        reverse_dict[my_dict.get(key)] = key
    # Find the starting point of itinerary
    from_loc = None
    keys_rev = reverse_dict.keys()
    for key in keys:
        if key not in reverse_dict:
            from_loc = key
            break
            # Trace complete path
    to = my_dict.get(from_loc)
    while to is not None:
        result.append([from_loc, to])
        from_loc = to
        to = my_dict.get(to)
    return result


my_dict = dict()
my_dict["NewYork"] = "Chicago"
my_dict["Boston"] = "Texas"
my_dict["Missouri"] = "NewYork"
my_dict["Texas"] = "Missouri"
print(trace_path(my_dict))
