class Node:
    def __init__(self, data):
        self.data = data
        self.next_element = None
        self.previous_element = None


class LinkedList:
    def __init__(self):
        self.head_node = None

    def get_head(self):
        return self.head_node

    def is_empty(self):
        if self.head_node is None:
            return True
        else:
            return False

    def insert_at_head(self, data):
        temp_node = Node(data)
        temp_node.next_element = self.head_node
        self.head_node = temp_node
        return self.head_node

    def print_list(self):
        if self.is_empty():
            print("List is Empty")
            return False
        temp = self.head_node
        while temp.next_element is not None:
            print(temp.data, end=" -> ")
            temp = temp.next_element
        print(temp.data, end=" -> None ")
        return True


def insert_at_tail(lst, value):
    new_node = Node(value)
    if lst.get_head() is None:
        lst.head_node = new_node
        return
    temp = lst.get_head()
    while temp.next_element:
        temp = temp.next_element
    temp.next_element = new_node
    return


def insert_at_position(lst, value, position):
    new_node = Node(value)
    count = 0
    temp = lst.get_head()
    while temp.next_element is not None:
        count += 1
        if count == position:
            new_node.next_element = temp.next_element
            temp.next_element = new_node

        temp = temp.next_element
    return


def search(lst, value):
    temp = lst.get_head()
    while temp:
        if temp.data == value:
            return True
        temp = temp.next_element
    return False


def delete_at_head(lst):
    temp = lst.get_head()
    if temp.next_element is not None:
        lst.head_node = temp.next_element
        temp.next_element = None


def delete(lst, value):
    temp = lst.get_head()
    while temp.next_element is not None:
        if temp.data == value:
            previous_element.next_element = temp.next_element
            temp.next_element = None
            break
        previous_element = temp
        temp = temp.next_element


def length(lst):
    count = 0
    lst = lst.get_head()
    while lst:
        count += 1
        lst = lst.next_element
    return count


def reverse(lst):
    previous = None
    current = lst.get_head()
    next = None
    while current:
        next = current.next_element
        current.next_element = previous
        previous = current
        current = next
        lst.head_node = previous
    return lst


def detect_loop(lst):
    onestep = lst.get_head()
    twostep = lst.get_head()
    while onestep and twostep and twostep.next_element:
        onestep = onestep.next_element  # Moves one node at a time
        twostep = twostep.next_element.next_element  # Skips a node
        if onestep == twostep:  # Loop exists
            return True
    return False

lst = LinkedList()
insert_at_tail(lst, 0)
insert_at_tail(lst, 1)
insert_at_tail(lst, 2)
insert_at_tail(lst, 4)
insert_at_position(lst, 3, 1)
print(search(lst, 4))
delete_at_head(lst)
lst.print_list()
delete(lst, 2)
lst.print_list()
print(length(lst))
reverse(lst).print_list()
print(detect_loop(lst))
